abline(v=7.65)
abline(v=8.39)
abline(v=8.81)
distribution(returned$ratio)
fit
anova(fit)
plot(returned$date, returned$ratio)
lm(returned$radio ~ returned$date^2)
lm(returned$radio ~ I(returned$date^2))
lm(returned$radio ~ returned$date
)
lm(returned$ratio ~ returned$date^2)
fit2  <-  lm(returned$ratio ~ returned$date^2+returned$date)
summary(fit2)
abline(fit2)
line(lowess(returned$date, returned$ratio))
lines(lowess(returned$date, returned$ratio))
fit3 <- lines(lowess(returned$date, returned$ratio))
anova(fit3,fit2)
anova(fit3)
anova(lm(returned$ratio ~ returned$date), lowess(returned$date, returned$ratio))
lines(lowess(returned$date, returned$ratio))
line(lowess(returned$date, returned$ratio))
(lowess(returned$date, returned$ratio))
summary(lowess(returned$date, returned$ratio))
lines(lm(returned$ratio ~ I(returned$date^2)))
?lowess
a  <- NULL
shipped <- read.csv("~/Downloads/op_shipped_de - op_shipped_de.csv", sep=";")
View(shipped)
names(shipped)  <- c("date", "positions_shipped", "orders_shipped")
plot(shipped$date, shipped$poisitions_shipped)
par(mfrow = c(2,2))
plot(shipped$date, shipped$positions_shipped)
plot(shipped$date, shipped$orders_shipped)
shipped$ratio <- shipped$positions_shipped/shipped$orders_shipped
plot(density(shipped$ratio))
plot(shipped$date, shipped$ratio)
abline(lm(shipped$ratio ~ shipped$date))
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.05, .95), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
remove_outliers(shipped$positions_shipped)
quantile(shipped$positions_shipped, 0.05)
remove_outliers  <- function(data){}
remove_outliers  <- function(data){
minq  <- quantile(data, 0.05)
data[data < minq]  <- NA
data
}
remove_outliers(shipped$orders_shipped)
shipped$order_shipped  <-  remove_outliers(shipped$orders_shipped)
shipped$orders_shipped  <-  remove_outliers(shipped$orders_shipped)
shipped$positions_shipped  <-  remove_outliers(shipped$positions_shipped)
shipped$order_shipped  <-  NULL
shipped
plot(returned$date, returned$positions_shipped)
plot(shipped$date, shipped$positions_shipped)
abline(lm(shipped$positions_shipped ~ shipped$date))
class(shipped$date)
shipped$date  <-  as.Date(shipped$date)
plot(shipped$date, shipped$positions_shipped)
abline(lm(shipped$positions_shipped ~ shipped$date))
plot(shipped$date, shipped$orders_shipped)
abline(lm(shipped$orders_shipped ~ shipped$date))
view(shipped)
View(shipped)
quantile(shipped$orders_shipped, seq(0.1, 1, 0.1))
quantile(shipped$orders_shipped, seq(0.1, 1, 0.1), na.rm=TRUE)
quantile(shipped$orders_shipped, seq(0.01, 0.1, 0.01), na.rm=TRUE
)
memory  <-  function(N, n)
{}
memory  <-  function(N, n)
{
memory <- 2N/N* rep((2(N-n+1)))
N = 1:20
?rep
rep(2*N, 5)
sum(N)
memory  <-  function(N, n)
{
grossN  <- 1:N
grossN <- N:1
a  <- rep((2*(N-grossN))/(2N-grossN), n+1)
}
gros  <- N:1
N
g  <- 20:1
g
N  <- 20
n  <- 10
vecn  <- 1:n
vecn  <- 1:(n+1)
vec  <- (2*(N-vecn))/(2*N-vecn)
vec
prod(vec)
func memory(N,n)  <-
memory  <- func(N,n)
memoy  <- function(N,n)
{
vecn  <- 1:(n+1)
vec  <- (2(N-vecn))/(2*N-vecn)
memoy  <- prod(vec)
}
memoy(32,10)
memoy  <- function(N,n)
{
vecn  <- 1:(n+1)
vec  <- (2(N-vecn))/(2*N-vecn)
prod(vec)
}
memoy(32,10)
memoy
returne
?prod
prod
str(prod)
memory  <-  function(N,n)
{
vecn  <- 1:(n+1)
vec  <- (2(N-vecn))/(2*N-vecn)
return(prod(vec))
}
1-memory(32,10)
prod(1:n)
prod(1:3)
vec
vecn  <- 1:(n+1)
vec  <- (2(N-vecn))/(2*N-vecn)
N
vecn
(2*(N-vecn))/(2*N-vecn)
aa  <-  (2*(N-vecn))/(2*N-vecn)
memory  <-  function(N,n){
vecn  <-  1:(n+1)
erg  <-  (2*(N-vecn))/(2*N-vecn)
return(prod(erg))
}
memory(32,10)
1-memory(32,10)
1-memory(32,32)
x  <- 1:32
plot(x, meomry(32,x))
plot(x, memory(32,x))
plot(x, apply(memory(32,x))
)
plot(x, rep(memory(32,x), x))
plot(memory(32,x))
plot(1:32, memory(32,1:32))
memory(32,1:32)
x
meomry(32,x)
memory(32,x)
?apply
apply(x, memory)
apply(x, memory(32,x))
apply(x, FUN=memory(32,x))
x
y <- memory(32,as.numeric(x))
?seq
memory(32,seq(1,32))
mapply(memory, 32, 1:32)
plot(x, mapply(memory,32,1:32))
plot(x, 1-mapply(memory,32,1:32))
noten  <- c(round(seq(1,4,1/3),1),5)
erg  <- c(1,1,2,2,3,4,9,11,15,20,36)
factor(erg)
tbl  <- cbind(factor(noten), erg)
hist(tbl)
?hist
plot(noten,erg)
smooth(erg)
curve(smooth(erg))
abline(smooth(erg))
data  <- rep(noten, erg)
data
hist(data)
hist(data, breaks = 12)
hist(data, breaks = 10)
hist(data, breaks = 8)
hist(data, breaks = 11)
?hist
hist(data, breaks = noten)
hist(data, breaks = noten, label = erg)
hist(data, breaks = noten, label = TRUE
)
hist(data, breaks = noten, label = TRUE
)
hist(data, breaks = noten, xlim = noten, label = TRUE)
hist(data, breaks = noten, xlim = range(1:5), label = TRUE)
?hist
hist(data, breaks = noten, xlim = range(1:5), label = TRUE, freq=FALSE)
hist(data, breaks = noten, xlim = range(1:5), label = TRUE,)
par(mar = c(1,1,1,1))
hist(data, breaks = noten, xlim = range(1:5), label = TRUE,)
par(mar = c(2,2,2,2))
hist(data, breaks = noten, xlim = range(1:5), label = TRUE,)
library(Hmisc)
install(Hmisc)
axis(1, noten)
hist(data, breaks = noten, label = TRUE, axis(1, noten))
plot(data)
prob.table(data)
table(data)
density(data)
plot(density(data))
data  <- data + 4.3
data  <- data + 4.7
plot(density(data))
data
noten <- c(round(1,4,1/3),5)
noten <- c(round(seq(1,4,1/3),1),5)
erg  <-  c(1,1,2,2,3,4,9,11,15,20,36)
cbind(factor(noten),erg)
data  <- cbind(factor(noten),erg)
plot(density(data))
data  <- rep(noten, erg)
plot(density(data))
plot(density(data), labels = TRE)
plot(density(data), labels = TRUE)
?density
summary(density(data))
summary(data)
boxplot(data)
plot(density(data))
hist(erg)
hist(data)
hist(data, breaks = noten)
hist(data, breaks = noten, label = TRUE)
data
data[1]  <- NULL
data[1]  <- NA
data
hist(data)
hist(data, breaks = noten)
table(noten)
table(data)
hist(data, breaks = noten, xaxt="n")
axis(1, at= noten)
?axis
View(diff)
fit1
summary(fit1)
library(caret)
library(data.table)
library(datasets)
library(e1071)
library(forecast)
library(graphics)
library(grDevices)
library(lattice)
library(lubridate)
library(MASS)
library(plyr)
library(stats)
library(stinepack)
library(timeDate)
library(utils)
library(zoo)
library(reshape2)
library(tree)
library(robust)
library(shiny)
library(bizdays)
read.csv("/Volumes/Storage/epub.txt")
read("/Volumes/Storage/epub.txt")-> d
read.csv("/Volumes/Storage/epub.txt", header =FALSE)-> d
head(d)
gsub(pattern = "/Volumes/Storage/epubs/[A-Z]", "", d$V1)->d$autor
head(d)
gsub(pattern = "/Volumes/Storage/epubs/[A-Z]/", "", d$V1)->d$autor
head(d)
gsub("/Volumes/Storage/epubs/[A-Z]", "$$$", d$autor)->d$autor
d$autor
gsub(pattern = "/Volumes/Storage/epubs/[A-Z]/", "", d$V1)->d$autor
d$autor
gsub(pattern = "/Volumes/Storage/epubs/[A-Z]/", "", d$V1)->d$autor
gsub("/Volumes/Storage/epubs/English/[english]", "", d$autor)->d$autor
d$autor
?gsub
gsub("/Volumes/Storage/epubs/English/", "", d$autor)->d$autor
d$autor
read.csv("/Volumes/Storage/epub.txt", header =FALSE, sep = ";")-> d
gsub(pattern = "/Volumes/Storage/epubs/[A-Z]", "", d$V1)->d$new
gsub("/Volumes/Storage/epubs/English/", "", d$new)->d$new
d$new
read.csv("/Volumes/Storage/epub.txt", header =FALSE, sep = "-")-> d
d
dim(d)
d$V1
gsub("/Volumes/Storage/epubs/English/", "", d$V1)->d$V1
gsub("/Volumes/Storage/epubs/[A-Z]/", "", d$V1)->d$V1
d$V1
gsub("[eng", "", d$V1)->d$V1
gsub("//[eng", "", d$V1)->d$V1
gsub("[[english]]", "", d$V1)->d$V1
d$V1
gsub("[[english]", "", d$V1)->d$V1
d$V1
View(d)
gsub(".epub", "", d$V2)
gsub(".epub", "", d$V2)->d$V2
gsub(".epub", "", d$V3)->d$V3
View(d)
write.csv(d, "/Volumes/Storage/newdata.csv")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
mtcars
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
install.packages("knitr")
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
getwd()
setwd("/Volumes/Nifty/R/coursera/markdown")
getwd()
setwd("/Volumes/Nifty/R/RepData_PeerAssessment1")
getwd()
unzip("activity.zip")
>It is now possible to collect a large amount of data about personal movement using activity monitoring devices such as a Fitbit, Nike Fuelband, or Jawbone Up. These type of devices are part of the “quantified self” movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. But these data remain under-utilized both because the raw data are hard to obtain and there is a lack of statistical methods and software for processing and interpreting the data. This assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute intervals through out the day. The data consists of two months of data from an anonymous individual collected during the months of October and November, 2012 and include the number of steps taken in 5 minute intervals each day.
data <- read.csv("activity.csv")
View(d)
View(data)
dim(d)
summary(data)
str(data)
as.Date(data$date)->data$date
str(data)
aggregate.data.frame(x = data,by = list("date"),FUN = sum)
aggregate.data.frame(x = data,by = "date",FUN = sum)
aggregate.data.frame(x = data,by = list("date"),FUN = sum)
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("data.table")
detach("package:data.table", unload=TRUE)
install.packages("data.table")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?library
data.table(data)
plot(data$steps, data$interval)
summary(data$in)
summary(data$inter)
table(data$interval)
table(data$date)
plot(data$interval, data$steps)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(data, aes(x = interval, y = steps))+geom_line()
ggplot(data, aes(x = interval, y = steps, group = date))+geom_line()
500/5
max(data$interval)
2355/5
data.table(data)[, list(avg_steps = mean(steps), by = interval)]
data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE), by = interval)]
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE), interval)]
data.agg
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE), by= list(interval))]
data.agg
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE), by= interval)]
data.agg
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE), by= data$interval)]
data.agg
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE), by = interval)]
data.agg
table(data.agg)
data
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE)), by = interval)]
data.agg <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE)), by = interval]
data.agg
sum(data.agg$avg_steps)
plot(data.agg)
lines(data.agg)
library("ggplot2")
ggplot(data.agg, aes(x = interval, y = avg_steps))+geom_line()+ylab("average steps in interval")
max(data.agg$interval)
2355/60
time()
date()
format.Date(date(), "%hh:mm:ss"
)
format.Date(date(), "%hh:%mm:%ss"
)
format.Date(date(), "%h:%m:%s")
?format.Date
format.Date(date(),format = "%h:%m:%s")
sprintf(%03d, data.agg$interval)
sprintf("%03d", data.agg$interval)
sprintf("%04d", data.agg$interval)
substr(sprintf("%04d", data.agg$interval),0,2)
substr(sprintf("%04d", data.agg$interval),0,2)
paste(substr(sprintf("%04d", data.agg$interval),0,2),":",sep="")
paste(paste(substr(sprintf("%04d", data.agg$interval),0,2),":",sep=""),substr(sprintf("%04d", data.agg$interval),2,4), sep="")
paste(paste(substr(sprintf("%04d", data.agg$interval),0,2),":",sep=""),substr(sprintf("%04d", data.agg$interval),3,4), sep="")
interval_labels <- paste(paste(substr(sprintf("%04d", data.agg$interval),0,2),":",sep=""),substr(sprintf("%04d", data.agg$interval),3,4), sep="")
ggplot(data.agg, aes(x = interval, y = avg_steps))+geom_line()+ylab("average steps in interval")+scale_x_discrete(breaks= interval_labels)
ggplot(data.agg, aes(x = interval, y = avg_steps))+geom_line()+ylab("average steps in interval")+scale_x_discrete(labels= interval_labels)
ggplot(data.agg, aes(x = interval, y = avg_steps))+geom_line()+ylab("average steps in interval")+scale_x_discrete(labels= interval_labels, breaks = data.agg$interval)
intreval_labels
interval_labels
factor(x = data.agg$interval,labels = interval_labels)
ggplot(data.agg, aes(x = factor(x = data.agg$interval,labels = interval_labels), y = avg_steps))+geom_line()+ylab("average steps in interval")
data.agg$interval_factor <- factor(x = data.agg$interval,labels = interval_labels)
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= interval_factor))+geom_line()+ylab("average steps in interval")
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -90, hjust = 0))
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -90, hjust = 0))+scale_x_discrete(breaks = 24*4)
levels(interval_labels)
interval_labels
288/2
288/4
interval_labels[seq(1,288,4)]
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -90, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
data.agg
weekdays(data$date)
weekdays(data$date,abbreviate = TRUE)
labels(weekdays(data$date,abbreviate = TRUE))
weekdays(data$date,abbreviate = TRUE)
factor(weekdays(data$date,abbreviate = TRUE))
Sys.setlocale(category = "LC_ALL", "en_US.UTF-8")
factor(weekdays(data$date,abbreviate = TRUE))
factor(weekdays(data$date))
data$weekday <-factor(weekdays(data$date))
data.agg2 <- data.table(data)[, list(avg_steps = mean(steps,na.rm=TRUE)), by = list(interval, weekday)]
data.agg2
data.agg2$interval_factor <- factor(x = data.agg2$interval,labels = interval_labels)
data.agg2
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps,group= weekday, color=weekday))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= weekday, color=weekday))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+facet_grid(facets = ~. weekday)
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= weekday, color=weekday))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+facet_grid(facets = weekday ~ . )
ggplot(data.agg, aes(x = interval_factor, y = avg_steps color=weekday))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+facet_grid(facets = weekday ~ . )
ggplot(data.agg, aes(x = interval_factor, y = avg_steps ,color=weekday))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+facet_grid(facets = weekday ~ . )
ggplot(data.agg, aes(x = interval_factor, y = avg_steps ,color=weekday))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps ,color=weekday))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps ,color=weekday, group = weekday))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekday))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
data.agg2$weekdayclass <- ifelse(data.agg2$weekday == "Sunday" || data.agg2$weekday=="Saturday", "Weekend","Weekday")
table(data.agg2$weekdayclass)
data.agg2$weekday
data.agg2$weekday == "Sunday"
data.agg2$weekdayclass <- ifelse(data.agg2$weekday == "Sunday" || data.agg2$weekday == "Saturday", "Weekend","Weekday")
data.agg2
data.agg2$weekday == "Sunday"
data.agg2$weekday %in% c("Sunday", "Saturday")
data.agg2$weekdayclass <- ifelse(data.agg2$weekday %in% c("Sunday", "Saturday"), "Weekend","Weekday")
data.agg2$weekdayclass
table(data.agg2$weekday, data.agg2$weekdayclass)
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+stat_smooth()
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+stat_smooth("auto")
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekday ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+stat_smooth(method ="auto")
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+stat_smooth(method="loess")
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+stat_smooth()
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+geom_smooth()
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+geom_smooth(method ="loess")
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,4)])+geom_smooth(method="auto")
data.agg2$weekdayclass
ggplot(data.agg2, aes(x = interval_factor, y = avg_steps , group = weekdayclass))+geom_line()+ylab("average steps in interval")+facet_grid(facets = weekdayclass ~ . )+theme(axis.text.x=element_text(angle = -45, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,6)])+geom_smooth(method="auto")
Sys.setlocale("LC_ALL","English")
ggplot(data.agg, aes(x = interval_factor, y = avg_steps,group= 1))+geom_line()+ylab("average steps in interval")+theme(axis.text.x=element_text(angle = -90, hjust = 0))+scale_x_discrete(breaks = interval_labels[seq(1,288,6)])+xlab("time")
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
data
data[is.na(data$steps),]
data.agg
data[is.na(data$steps),]$interval
merge(x = data, y = data.agg, by = interval )
merge(x = data, y = data.agg)
merge(x = data, y = data.agg)->data
str(data)
data$steps <- ifelse(is.na(data$steps), data$avg_steps, data$steps)
summary(data$steps)
runApp
runApp()
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
setwd
getwd()
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
runExample("01_hello")
runExample("01_hello")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
mtcars
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
levels(mtcars$cyl)
mtcars$cyl
levels(factor(mtcars$cyl))
shiny::runApp('/Volumes/Nifty/R/coursera/shiny-app')
